---
import { PortableText } from "astro-portabletext";
import Link from "./Link.astro";
import type { LinkType } from "../utils/sanity";

const { data } = Astro.props;
---

<section class="">
  <div
    class={`container mx-auto px-4 md:px-6 grid gap-6  ${data.items?.length > 0 ? "md:grid-cols-3 lg:grid-cols-4" : ""}`}
  >
    <div
      class={`flex flex-col items-start gap-4 ${data.items?.length > 0 ? "md:col-span-2 lg:col-span-3" : ""}`}
    >
      {data.title && <h3 class="pill">{data.title}</h3>}
      <div class="t-2">
        <PortableText value={data.text} />
      </div>
      {
        data.links && (
          <div class="flex gap-4">
            {data.links.map((link: LinkType) => (
              <Link link={link} classes="" />
            ))}
          </div>
        )
      }
    </div>
    <div class="flex flex-col gap-4">
      {
        data.items?.map(
          (
            card: { subText: string; text: string; number: string },
            index: number,
          ) => (
            <div
              class={`card overflow-hidden bg-neutral-200/60 ${index === 0 ? "initial" : ""}`}
              data-index={index}
            >
              <div class="flex h-full min-h-80 flex-col justify-between gap-4">
                <div>
                  <div class="progress-container relative h-1 overflow-hidden bg-neutral-300 transition-all">
                    <div class="progress-bar bg-primary h-1 w-0 transition-all duration-[3000ms]" />
                  </div>
                  <span class="mono block p-4">
                    {index + 1} / {data.items.length}
                  </span>
                </div>
                <div class="p-4">
                  <span class="mb-4 block text-7xl font-medium">
                    {card.number}
                  </span>
                  <p>{card.text}</p>
                  <p class="opacity-60">{card.subText}</p>
                </div>
              </div>
            </div>
          ),
        )
      }
    </div>
  </div>

  <script>
    const initAnimation = () => {
      const cards = document.querySelectorAll(".card");
      let activeIndex = 0;

      // Function to update the active class
      const updateActiveClass = () => {
        cards.forEach((card, index) => {
          if (index === activeIndex) {
            card.classList.add("active");
          } else {
            card.classList.remove("active");
            card.classList.remove("initial");
          }
        });
      };

      updateActiveClass();

      // Set up interval to change active index every 3 seconds
      setInterval(() => {
        activeIndex = (activeIndex + 1) % cards.length;
        updateActiveClass();
      }, 3000);
    };

    // Reinitialize the animation on DOMContentLoaded
    document.addEventListener("DOMContentLoaded", () => {
      initAnimation();
    });

    // Reinitialize the animation whenever navigating between pages
    document.addEventListener("astro:page-load", () => {
      initAnimation();
    });
  </script>

  <style>
    .card {
      max-height: 1rem;
      overflow: hidden;
      transition: all 1s;
      height: 20rem;
    }
    .card .progress-bar {
      width: 0;
      transition: width 3s ease-in-out;
    }
    .card .progress-container {
      height: 0px;
    }
    .active,
    .initial {
      max-height: 20rem;
    }
    .active .progress-bar {
      width: 100%;
      transition: width 3s ease-in-out;
    }
    .active .progress-container,
    .initial .progress-container {
      height: 4px;
    }
  </style>
</section>
